%!PS-Adobe-3.0
%%Title: 1.25, ead_attack.py
%%For: Yash Sharma
%%Creator: a2ps version 4.14
%%CreationDate: Sun Feb 18 13:53:21 2018
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%Pages: 5
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 842 def
/sw 595 def
/llx 24 def
/urx 559 def
/ury 818 def
/lly 24 def
/#copies 1 def
/th 20.000000 def
/fnfs 15 def
/bfs 10.954136 def
/cw 6.572482 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   741.595000 th add
def
/pmw 0 def
/pmh 0 def
/v 0 def
/x [
  0
] def
/y [
  pmh ph add 0 mul ph add
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1) 1
%%BeginPageSetup
/pagesave save def
12 0 translate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.600737 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(## en_attack.py -- attack a network optimizing elastic-net distance with an en d) c n
(ecision rule) N
(##) N
(## Copyright \(C\) 2017, Yash Sharma <ysharma1126@gmail.com>.) N
(## Copyright \(C\) 2016, Nicholas Carlini <nicholas@carlini.com>.) N
(##) N
(## This program is licenced under the BSD 2-Clause licence,) N
(## contained in the LICENCE file in this directory.) N
() p n
(import) K
( sys) p n
(import) K
( tensorflow as tf) p n
(import) K
( numpy as np) p n
() N
(BINARY_SEARCH_STEPS = 9  ) S
(# number of times to adjust the constant with binary se) c n
(arch) N
(MAX_ITERATIONS = 10000   ) p
(# number of iterations to perform gradient descent) c n
(ABORT_EARLY = True       ) p
(# if we stop improving, abort gradient descent early) c n
(LEARNING_RATE = 1e-2     ) p
(# larger values converge faster to less accurate result) c n
(s) N
(TARGETED = True          ) p
(# should we target one specific class? or just be wrong) c n
(?) N
(CONFIDENCE = 0           ) p
(# how strong the adversarial example should be) c n
(INITIAL_CONST = 1e-3     ) p
(# the initial constant c to pick as a first guess) c n
(BETA = 1e-3              ) p
(# Hyperparameter trading off L2 minimization for L1 min) c n
(imization) N
() p n
(class) K
( EADEN:) p n
(    ) S
(def) K
( __init__\(self, sess, model, batch_size=1, confidence = CONFIDENCE,) p n
(                 targeted = TARGETED, learning_rate = LEARNING_RATE,) N
(                 binary_search_steps = BINARY_SEARCH_STEPS, max_iterations = MAX) N
(_ITERATIONS,) N
(                 abort_early = ABORT_EARLY, ) N
(                 initial_const = INITIAL_CONST, beta = BETA\):) N
(        """) N
(        EAD with EN Decision Rule ) str n
() N
(        Returns adversarial examples for the supplied model.) N
(        ) S
(""") p n
() N
(        image_size, num_channels, num_labels = model.image_size, model.num_chann) N
(els, model.num_labels) N
(        self.sess = sess) N
(        self.TARGETED = targeted) N
(        self.LEARNING_RATE = learning_rate) N
(        self.MAX_ITERATIONS = max_iterations) N
(        self.BINARY_SEARCH_STEPS = binary_search_steps) N
(        self.ABORT_EARLY = abort_early) N
(        self.CONFIDENCE = confidence) N
(        self.initial_const = initial_const) N
(        self.batch_size = batch_size) N
(        self.beta = beta) N
(        self.beta_t = tf.cast\(self.beta, tf.float32\)) N
() N
(        self.repeat = binary_search_steps >= 10) N
() N
(        shape = \(batch_size,image_size,image_size,num_channels\)) N
() N
(        ) S
(# these are variables to be more efficient in sending data to tf) c n
(        self.timg = tf.Variable\(np.zeros\(shape\), dtype=tf.float32\)) p n
(        self.newimg = tf.Variable\(np.zeros\(shape\), dtype=tf.float32\)) N
(        self.slack = tf.Variable\(np.zeros\(shape\), dtype=tf.float32\)) N
(        self.tlab = tf.Variable\(np.zeros\(\(batch_size,num_labels\)\), dtype=tf.floa) N
(t32\)) N
(        self.const = tf.Variable\(np.zeros\(batch_size\), dtype=tf.float32\)) N
() N
(        ) S
(# and here's what we use to assign them) c n
(        self.assign_timg = tf.placeholder\(tf.float32, shape\)) p n
(ead_attack.py) (Page 1/5) () title
border
grestore
(Yash Sharma) rhead
() (1/5) () footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2) 2
%%BeginPageSetup
/pagesave save def
12 0 translate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.600737 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        self.assign_newimg = tf.placeholder\(tf.float32, shape\)) p n
(        self.assign_slack = tf.placeholder\(tf.float32, shape\)) N
(        self.assign_tlab = tf.placeholder\(tf.float32, \(batch_size,num_labels\)\)) N
(        self.assign_const = tf.placeholder\(tf.float32, [batch_size]\)) N
(        ) N
(        self.global_step = tf.Variable\(0, trainable=False\)) N
(        self.global_step_t = tf.cast\(self.global_step, tf.float32\)) N
() N
(        """) S
(Fast Iterative Soft Thresholding) str
(""") p n
(        """) S
(--------------------------------) str
(""") p n
(        self.zt = tf.divide\(self.global_step_t, self.global_step_t+tf.cast\(3, tf) N
(.float32\)\)) N
() N
(        cond1 = tf.cast\(tf.greater\(tf.subtract\(self.slack, self.timg\),self.beta_) N
(t\), tf.float32\)) N
(        cond2 = tf.cast\(tf.less_equal\(tf.abs\(tf.subtract\(self.slack,self.timg\)\),) N
(self.beta_t\), tf.float32\)) N
(        cond3 = tf.cast\(tf.less\(tf.subtract\(self.slack, self.timg\),tf.negative\(s) N
(elf.beta_t\)\), tf.float32\)) N
() N
(        upper = tf.minimum\(tf.subtract\(self.slack,self.beta_t\), tf.cast\(0.5, tf.) N
(float32\)\)) N
(        lower = tf.maximum\(tf.add\(self.slack,self.beta_t\), tf.cast\(-0.5, tf.floa) N
(t32\)\)) N
() N
(        self.assign_newimg = tf.multiply\(cond1,upper\)+tf.multiply\(cond2,self.tim) N
(g\)+tf.multiply\(cond3,lower\)) N
(        self.assign_slack = self.assign_newimg+tf.multiply\(self.zt, self.assign_) N
(newimg-self.newimg\)) N
(        self.setter = tf.assign\(self.newimg, self.assign_newimg\)) N
(        self.setter_y = tf.assign\(self.slack, self.assign_slack\)) N
(        """) S
(--------------------------------) str
(""") p n
(        ) S
(# prediction BEFORE-SOFTMAX of the model) c n
(        self.output = model.predict\(self.newimg\)) p n
(        self.output_y = model.predict\(self.slack\)) N
(        ) N
(        ) S
(# distance to the input data) c n
(        self.l2dist = tf.reduce_sum\(tf.square\(self.newimg-self.timg\),[1,2,3]\)) p n
(        self.l2dist_y = tf.reduce_sum\(tf.square\(self.slack-self.timg\),[1,2,3]\)) N
(        self.l1dist = tf.reduce_sum\(tf.abs\(self.newimg-self.timg\),[1,2,3]\)) N
(        self.l1dist_y = tf.reduce_sum\(tf.abs\(self.slack-self.timg\),[1,2,3]\)) N
(        self.elasticdist = self.l2dist + tf.multiply\(self.l1dist, self.beta_t\)) N
(        self.elasticdist_y = self.l2dist_y + tf.multiply\(self.l1dist_y, self.bet) N
(a_t\)) N
(        ) N
(        ) S
(# compute the probability of the label class versus the maximum other) c n
(        real = tf.reduce_sum\(\(self.tlab\)*self.output,1\)) p n
(        real_y = tf.reduce_sum\(\(self.tlab\)*self.output_y,1\)) N
(        other = tf.reduce_max\(\(1-self.tlab\)*self.output - \(self.tlab*10000\),1\)) N
(        other_y = tf.reduce_max\(\(1-self.tlab\)*self.output_y - \(self.tlab*10000\),) N
(1\)) N
(        ) S
(if) K
( self.TARGETED:) p n
(            ) S
(# if targeted, optimize for making the other class most likely) c n
(            loss1 = tf.maximum\(0.0, other-real+self.CONFIDENCE\)) p n
(            loss1_y = tf.maximum\(0.0, other_y-real_y+self.CONFIDENCE\)) N
(        ) S
(else) K
(:) p n
(            ) S
(# if untargeted, optimize for making this class least likely.) c n
(            loss1 = tf.maximum\(0.0, real-other+self.CONFIDENCE\)) p n
(            loss1_y = tf.maximum\(0.0, real_y-other_y+self.CONFIDENCE\)) N
() N
(        ) S
(# sum up the losses) c n
(        self.loss21 = tf.reduce_sum\(self.l1dist\)) p n
(        self.loss21_y = tf.reduce_sum\(self.l1dist_y\)) N
(        self.loss2 = tf.reduce_sum\(self.l2dist\)) N
(        self.loss2_y = tf.reduce_sum\(self.l2dist_y\)) N
(        self.loss1 = tf.reduce_sum\(self.const*loss1\)) N
(        self.loss1_y = tf.reduce_sum\(self.const*loss1_y\)) N
(ead_attack.py) (Page 2/5) () title
border
grestore
(Yash Sharma) rhead
() (Sunday February 18, 2018) () footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 3
%%BeginPageSetup
/pagesave save def
12 0 translate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.600737 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(        self.loss_opt = self.loss1_y+self.loss2_y) N
(        self.loss = self.loss1+self.loss2+tf.multiply\(self.beta_t,self.loss21\)) N
(        ) N
(        self.learning_rate = tf.train.polynomial_decay\(self.LEARNING_RATE, self.) N
(global_step, self.MAX_ITERATIONS, 0, power=0.5\) ) N
(        start_vars = set\(x.name ) S
(for) K
( x ) p
(in) K
( tf.global_variables\(\)\)) p n
(        optimizer = tf.train.GradientDescentOptimizer\(self.learning_rate\)) N
(        self.train = optimizer.minimize\(self.loss_opt, var_list=[self.slack], gl) N
(obal_step=self.global_step\)) N
(        end_vars = tf.global_variables\(\)) N
(        new_vars = [x ) S
(for) K
( x ) p
(in) K
( end_vars ) p
(if) K
( x.name ) p
(not) K
( ) p
(in) K
( start_vars]) p n
() N
(        ) S
(# these are the variables to initialize when we run) c n
(        self.setup = []) p n
(        self.setup.append\(self.timg.assign\(self.assign_timg\)\)) N
(        self.setup.append\(self.tlab.assign\(self.assign_tlab\)\)) N
(        self.setup.append\(self.const.assign\(self.assign_const\)\)) N
(        ) N
(        self.init = tf.variables_initializer\(var_list=[self.global_step]+[self.s) N
(lack]+[self.newimg]+new_vars\)) N
() N
(    ) S
(def) K
( attack\(self, imgs, targets\):) p n
(        """) N
(        Perform the EAD attack on the given images for the given targets.) str n
() N
(        If self.targeted is true, then the targets represents the target labels.) N
(        If self.targeted is false, then targets are the original class labels.) N
(        ) S
(""") p n
(        r = []) N
(        ) S
(print) K
(\(') p
(go up to) str
(',len\(imgs\)\)) p n
(        ) S
(for) K
( i ) p
(in) K
( range\(0,len\(imgs\),self.batch_size\):) p n
(            ) S
(print) K
(\(') p
(tick) str
(',i\)) p n
(            r.extend\(self.attack_batch\(imgs[i:i+self.batch_size], targets[i:i+se) N
(lf.batch_size]\)\)) N
(        ) S
(return) K
( np.array\(r\)) p n
() N
(    ) S
(def) K
( attack_batch\(self, imgs, labs\):) p n
(        """) N
(        Run the attack on a batch of images and labels.) str n
(        ) S
(""") p n
(        ) S
(def) K
( compare\(x,y\):) p n
(            ) S
(if) K
( ) p
(not) K
( isinstance\(x, \(float, int, np.int64\)\):) p n
(                x = np.copy\(x\)) N
(                ) S
(if) K
( self.TARGETED:) p n
(                    x[y] -= self.CONFIDENCE) N
(                ) S
(else) K
(:) p n
(                    x[y] += self.CONFIDENCE) N
(                x = np.argmax\(x\)) N
(            ) S
(if) K
( self.TARGETED:) p n
(                ) S
(return) K
( x == y) p n
(            ) S
(else) K
(:) p n
(                ) S
(return) K
( x != y) p n
() N
(        batch_size = self.batch_size) N
() N
(        ) S
(# set the lower and upper bounds accordingly) c n
(        lower_bound = np.zeros\(batch_size\)) p n
(        CONST = np.ones\(batch_size\)*self.initial_const) N
(        upper_bound = np.ones\(batch_size\)*1e10) N
() N
(        ) S
(# the best l2, score, and image attack) c n
(        o_besten = [1e10]*batch_size) p n
(        o_bestscore = [-1]*batch_size) N
(        o_bestattack = [np.zeros\(imgs[0].shape\)]*batch_size) N
(        ) N
(        ) S
(for) K
( outer_step ) p
(in) K
( range\(self.BINARY_SEARCH_STEPS\):) p n
(ead_attack.py) (Page 3/5) () title
border
grestore
(Yash Sharma) rhead
() (3/5) () footer
end % of iso1dict
pagesave restore
showpage
%%Page: (4) 4
%%BeginPageSetup
/pagesave save def
12 0 translate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.600737 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            ) p
(# completely reset adam's internal state.) c n
(            self.sess.run\(self.init\)) p n
(            batch = imgs[:batch_size]) N
(            batchlab = labs[:batch_size]) N
(    ) N
(            besten = [1e10]*batch_size) N
(            bestscore = [-1]*batch_size) N
() N
(            ) S
(# The last iteration \(if we run many steps\) repeat the search once.) c n
(            ) p
(if) K
( self.repeat == True ) p
(and) K
( outer_step == self.BINARY_SEARCH_STEPS-1:) p n
(                CONST = upper_bound) N
() N
(            ) S
(# set the variables so that we don't have to send them over again) c n
(            self.sess.run\(self.setup, {self.assign_timg: batch,) p n
(                                       self.assign_tlab: batchlab,) N
(                                       self.assign_const: CONST}\)) N
(            self.sess.run\(self.setter, feed_dict={self.assign_newimg: batch}\)) N
(            self.sess.run\(self.setter_y, feed_dict={self.assign_slack: batch}\)) N
(            prev = 1e6) N
(            ) S
(for) K
( iteration ) p
(in) K
( range\(self.MAX_ITERATIONS\):) p n
(                ) S
(# perform the attack ) c n
(                self.sess.run\([self.train]\)) p n
(                self.sess.run\([self.setter, self.setter_y]\)) N
(                l, l2s, l1s, elastic, scores, nimg = self.sess.run\([self.loss, s) N
(elf.l2dist, self.l1dist, self.elasticdist, self.output, self.newimg]\)) N
() N
() N
() N
(                ) S
(# print out the losses every 10%) c n
(                """) p n
(                if iteration%\(self.MAX_ITERATIONS//10\) == 0:) str n
(                    print\(iteration,self.sess.run\(\(self.loss,self.loss1,self.loss2,self.loss21\)\)\)) N
(                ) S
(""") p n
(                ) S
(# check if we should abort search if we're getting nowhere.) c n
(                ) p
(if) K
( self.ABORT_EARLY ) p
(and) K
( iteration%\(self.MAX_ITERATIONS//10\) == 0) p n
(:) N
(                    ) S
(if) K
( l > prev*.9999:) p n
(                        ) S
(break) K n
(                    prev = l) p n
() N
(                ) S
(# adjust the best result found so far) c n
(                ) p
(for) K
( e,\(en,sc,ii\) ) p
(in) K
( enumerate\(zip\(elastic,scores,nimg\)\):) p n
(                    ) S
(if) K
( en < besten[e] ) p
(and) K
( compare\(sc, np.argmax\(batchlab[e]\)\):) p n
(                        besten[e] = en) N
(                        bestscore[e] = np.argmax\(sc\)) N
(                    ) S
(if) K
( en < o_besten[e] ) p
(and) K
( compare\(sc, np.argmax\(batchlab[e]\)\):) p n
(                        o_besten[e] = en) N
(                        o_bestscore[e] = np.argmax\(sc\)) N
(                        o_bestattack[e] = ii) N
() N
(            ) S
(# adjust the constant as needed) c n
(            ) p
(for) K
( e ) p
(in) K
( range\(batch_size\):) p n
(                ) S
(if) K
( compare\(bestscore[e], np.argmax\(batchlab[e]\)\) ) p
(and) K
( bestscore[e) p n
(] != -1:) N
(                    ) S
(# success, divide const by two) c n
(                    upper_bound[e] = min\(upper_bound[e],CONST[e]\)) p n
(                    ) S
(if) K
( upper_bound[e] < 1e9:) p n
(                        CONST[e] = \(lower_bound[e] + upper_bound[e]\)/2) N
(                ) S
(else) K
(:) p n
(                    ) S
(# failure, either multiply by 10 if no solution found yet) c n
(                    ) p
(#          or do binary search with the known upper bound) c n
(                    lower_bound[e] = max\(lower_bound[e],CONST[e]\)) p n
(                    ) S
(if) K
( upper_bound[e] < 1e9:) p n
(                        CONST[e] = \(lower_bound[e] + upper_bound[e]\)/2) N
(                    ) S
(else) K
(:) p n
(                        CONST[e] *= 10) N
() N
(ead_attack.py) (Page 4/5) () title
border
grestore
(Yash Sharma) rhead
() (Sunday February 18, 2018) () footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5) 5
%%BeginPageSetup
/pagesave save def
12 0 translate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.600737 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(# return the best solution found) c n
(        o_besten = np.array\(o_besten\)) p n
(        ) S
(return) K
( o_bestattack) p n
(ead_attack.py) (Page 5/5) () title
border
grestore
(Yash Sharma) rhead
() (5/5) () footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
